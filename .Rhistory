text=NA,
out1=NA,
out2=NA,
out3=NA)
message("group data")
tpb<-txtProgressBar(0,nrow(dataset))
for(x in 1:length(dataset)){
splitted<-strsplit(dataset[x]," ")[[1]]
dataparse[x,c(paste0("item",1:3),paste0("value",1:3))]<-splitted[1:6]
dataparse[x,"text"]<-paste(splitted[7:(length(splitted)-6)], collapse=" ")
dataparse[x,c(paste0("part_item",1:3),paste0("part_value",1:3))]<-splitted[(length(splitted)-5):length(splitted)]
setTxtProgressBar(tpb,x)
}
dataparse<-dataparse[!is.na(dataparse),]
dataparse$id<-1:nrow(dataparse)
dataparse$group<-(1:nrow(dataparse)+1)%/% 2
### get turn-level text
turnparse<-data.frame(id=NA,
group=NA,
turn=NA,
youthem=NA,
text=NA)
message("turn data")
tpb<-txtProgressBar(0,nrow(dataparse))
for(x in 1:nrow(dataparse)){
person.turns<-strsplit(dataparse[x,"text"],"<eos>")[[1]]
row.set<-(nrow(turnparse)+1):(nrow(turnparse)+length(person.turns))
turnparse[row.set,c("id","group")]<-dataparse[x,c("id","group")]
turnparse[row.set,"text"]<-person.turns
turnparse[row.set,"turn"]<-1:length(person.turns)
setTxtProgressBar(tpb,x)
}
turnparse <- turnparse[!(is.na(turnparse$group)),]
turntext = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n()) %>%
slice(-n())
write_csv(turntext,"turn_tf.csv")
### get group-level outcomes
agrees = turnparse %>%
select(-cleantext) %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(n())
items = turnparse %>%
select(-cleantext) %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n())  %>%
slice(n())
groups = inner_join(agrees, items, by = c("id", "group")) %>%
select(-starts_with("you"), -starts_with("turn")) %>%
mutate(text.x = as.character(text.x),
agreement = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[3]})),
reward = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[2]}))) %>%
select(-text.x) %>%
mutate(text.y = as.character(text.y),
num_items = str_split(text.y, "=| "),
item1outcome = unlist(lapply(num_items,
function(x) {x[3]})),
item2outcome = unlist(lapply(num_items,
function(x) {x[5]})),
item3outcome = unlist(lapply(num_items,
function(x) {x[7]}))) %>%
select(-text.y, -num_items)
dp = dataparse %>%
left_join(groups, by = c("id", "group"))
write_csv(dp,"group_df.csv")
install.packages(c("qdap", "tidy", "verse", "stm", "glmnet", "quanteda", "shiny"))
library(tidyverse)
# read in raw data
dataset<-readLines("src/data/negotiate/data.txt")
dataparse<-data.frame(item1=NA,
item2=NA,
item3=NA,
value1=NA,
value2=NA,
value3=NA,
part_item1=NA,
part_item2=NA,
part_item3=NA,
part_value1=NA,
part_value2=NA,
part_value3=NA,
text=NA,
out1=NA,
out2=NA,
out3=NA)
message("group data")
tpb<-txtProgressBar(0,nrow(dataset))
for(x in 1:length(dataset)){
splitted<-strsplit(dataset[x]," ")[[1]]
dataparse[x,c(paste0("item",1:3),paste0("value",1:3))]<-splitted[1:6]
dataparse[x,"text"]<-paste(splitted[7:(length(splitted)-6)], collapse=" ")
dataparse[x,c(paste0("part_item",1:3),paste0("part_value",1:3))]<-splitted[(length(splitted)-5):length(splitted)]
setTxtProgressBar(tpb,x)
}
dataparse<-dataparse[!is.na(dataparse),]
dataparse$id<-1:nrow(dataparse)
dataparse$group<-(1:nrow(dataparse)+1)%/% 2
### get turn-level text
turnparse<-data.frame(id=NA,
group=NA,
turn=NA,
youthem=NA,
text=NA)
message("turn data")
tpb<-txtProgressBar(0,nrow(dataparse))
for(x in 1:nrow(dataparse)){
person.turns<-strsplit(dataparse[x,"text"],"<eos>")[[1]]
row.set<-(nrow(turnparse)+1):(nrow(turnparse)+length(person.turns))
turnparse[row.set,c("id","group")]<-dataparse[x,c("id","group")]
turnparse[row.set,"text"]<-person.turns
turnparse[row.set,"turn"]<-1:length(person.turns)
setTxtProgressBar(tpb,x)
}
turnparse <- turnparse[!(is.na(turnparse$group)),]
turntext = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n()) %>%
slice(-n())
write_csv(turntext,"turn_tf.csv")
### get group-level outcomes
agrees = turnparse %>%
select(-cleantext) %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(n())
items = turnparse %>%
select(-cleantext) %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n())  %>%
slice(n())
groups = inner_join(agrees, items, by = c("id", "group")) %>%
select(-starts_with("you"), -starts_with("turn")) %>%
mutate(text.x = as.character(text.x),
agreement = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[3]})),
reward = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[2]}))) %>%
select(-text.x) %>%
mutate(text.y = as.character(text.y),
num_items = str_split(text.y, "=| "),
item1outcome = unlist(lapply(num_items,
function(x) {x[3]})),
item2outcome = unlist(lapply(num_items,
function(x) {x[5]})),
item3outcome = unlist(lapply(num_items,
function(x) {x[7]}))) %>%
select(-text.y, -num_items)
dp = dataparse %>%
left_join(groups, by = c("id", "group"))
write_csv(dp,"group_df.csv")
library(tidyverse)
install.packages("tidyverse")
install.packages("stm")
install.packages("shiny")
install.packages("glmnet")
install.packages("coreNLP")
library(tidyverse)
dataset<-readLines("src/data/negotiate/data.txt")
dataparse<-data.frame(item1=NA,
item2=NA,
item3=NA,
value1=NA,
value2=NA,
value3=NA,
part_item1=NA,
part_item2=NA,
part_item3=NA,
part_value1=NA,
part_value2=NA,
part_value3=NA,
text=NA,
out1=NA,
out2=NA,
out3=NA)
message("group data")
tpb<-txtProgressBar(0,nrow(dataset))
for(x in 1:length(dataset)){
splitted<-strsplit(dataset[x]," ")[[1]]
dataparse[x,c(paste0("item",1:3),paste0("value",1:3))]<-splitted[1:6]
dataparse[x,"text"]<-paste(splitted[7:(length(splitted)-6)], collapse=" ")
dataparse[x,c(paste0("part_item",1:3),paste0("part_value",1:3))]<-splitted[(length(splitted)-5):length(splitted)]
setTxtProgressBar(tpb,x)
}
dataset<-readLines("src/data/negotiate/data.txt")
tpb<-txtProgressBar(0,length(dataset))
for(x in 1:length(dataset)){
splitted<-strsplit(dataset[x]," ")[[1]]
dataparse[x,c(paste0("item",1:3),paste0("value",1:3))]<-splitted[1:6]
dataparse[x,"text"]<-paste(splitted[7:(length(splitted)-6)], collapse=" ")
dataparse[x,c(paste0("part_item",1:3),paste0("part_value",1:3))]<-splitted[(length(splitted)-5):length(splitted)]
setTxtProgressBar(tpb,x)
}
dataparse<-dataparse[!is.na(dataparse),]
dataparse$id<-1:nrow(dataparse)
dataparse$group<-(1:nrow(dataparse)+1)%/% 2
### get turn-level text
turnparse<-data.frame(id=NA,
group=NA,
turn=NA,
youthem=NA,
text=NA)
message("turn data")
tpb<-txtProgressBar(0,nrow(dataparse))
for(x in 1:nrow(dataparse)){
person.turns<-strsplit(dataparse[x,"text"],"<eos>")[[1]]
row.set<-(nrow(turnparse)+1):(nrow(turnparse)+length(person.turns))
turnparse[row.set,c("id","group")]<-dataparse[x,c("id","group")]
turnparse[row.set,"text"]<-person.turns
turnparse[row.set,"turn"]<-1:length(person.turns)
setTxtProgressBar(tpb,x)
}
turnparse<-data.frame(id=NA,
group=NA,
turn=NA,
youthem=NA,
text=NA)
message("turn data")
tpb<-txtProgressBar(0,nrow(dataparse))
for(x in 1:nrow(dataparse)){
person.turns<-data.frame(text=strsplit(dataparse[x,"text"],"<eos>")[[1]],
id=dataparse[x,"id"],
group=dataparse[x,"group"])
person.turns$turn<-1:length(person.turns)
turnparse<-rbind(turnparse,person.turns)
setTxtProgressBar(tpb,x)
}
turnparse <- turnparse[!(is.na(turnparse$group)),]
turnparse<-data.frame(id=NA,
group=NA,
turn=NA,
text=NA)
message("turn data")
tpb<-txtProgressBar(0,nrow(dataparse))
for(x in 1:nrow(dataparse)){
person.turns<-data.frame(text=strsplit(dataparse[x,"text"],"<eos>")[[1]],
id=dataparse[x,"id"],
group=dataparse[x,"group"])
person.turns$turn<-1:length(person.turns)
turnparse<-rbind(turnparse,person.turns)
setTxtProgressBar(tpb,x)
}
dim(person.turns)
turnparse
person.turns
person.turns<-data.frame(id=dataparse[x,"id"],
group=dataparse[x,"group"],
text=strsplit(dataparse[x,"text"],"<eos>")[[1]])
person.turns$turn<-1:length(person.turns)
turnparse<-data.frame(id=NA,
group=NA,
turn=NA,
text=NA)
message("turn data")
tpb<-txtProgressBar(0,nrow(dataparse))
for(x in 1:nrow(dataparse)){
person.turns<-data.frame(id=dataparse[x,"id"],
group=dataparse[x,"group"],
text=strsplit(dataparse[x,"text"],"<eos>")[[1]])
person.turns$turn<-1:nrow(person.turns)
turnparse<-rbind(turnparse,person.turns)
setTxtProgressBar(tpb,x)
}
turnparse <- turnparse[!(is.na(turnparse$group)),]
rm(tpb,x,person.turns,dataset,row.set,splitted)
turntext = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n()) %>%
slice(-n())
write_csv(turntext,"turn_tf.csv")
### get group-level outcomes
agrees = turnparse %>%
select(-cleantext) %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(n())
items = turnparse %>%
select(-cleantext) %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n())  %>%
slice(n())
groups = inner_join(agrees, items, by = c("id", "group")) %>%
select(-starts_with("you"), -starts_with("turn")) %>%
mutate(text.x = as.character(text.x),
agreement = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[3]})),
reward = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[2]}))) %>%
select(-text.x) %>%
mutate(text.y = as.character(text.y),
num_items = str_split(text.y, "=| "),
item1outcome = unlist(lapply(num_items,
function(x) {x[3]})),
item2outcome = unlist(lapply(num_items,
function(x) {x[5]})),
item3outcome = unlist(lapply(num_items,
function(x) {x[7]}))) %>%
select(-text.y, -num_items)
dp = dataparse %>%
left_join(groups, by = c("id", "group"))
write_csv(dp,"group_df.csv")
turntext = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n()) %>%
slice(-n())
write_csv(turntext,"turn_tf.csv")
### get group-level outcomes
agrees = turnparse %>%
select(-cleantext) %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(n())
agrees = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(n())
items = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n())  %>%
slice(n())
groups = inner_join(agrees, items, by = c("id", "group")) %>%
select(-starts_with("you"), -starts_with("turn")) %>%
mutate(text.x = as.character(text.x),
agreement = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[3]})),
reward = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[2]}))) %>%
select(-text.x) %>%
mutate(text.y = as.character(text.y),
num_items = str_split(text.y, "=| "),
item1outcome = unlist(lapply(num_items,
function(x) {x[3]})),
item2outcome = unlist(lapply(num_items,
function(x) {x[5]})),
item3outcome = unlist(lapply(num_items,
function(x) {x[7]}))) %>%
select(-text.y, -num_items)
dp = dataparse %>%
left_join(groups, by = c("id", "group"))
write_csv(dp,"group_df.csv")
library(tidyverse)
groups = inner_join(agrees, items, by = c("id", "group")) %>%
select(-starts_with("you"), -starts_with("turn")) %>%
mutate(text.x = as.character(text.x),
agreement = unlist(lapply(stringr::str_split(text.x, "=| "),
function(x) {x[3]})),
reward = unlist(lapply(stringr::str_split(text.x, "=| "),
function(x) {x[2]}))) %>%
select(-text.x) %>%
mutate(text.y = as.character(text.y),
num_items = str_split(text.y, "=| "),
item1outcome = unlist(lapply(num_items,
function(x) {x[3]})),
item2outcome = unlist(lapply(num_items,
function(x) {x[5]})),
item3outcome = unlist(lapply(num_items,
function(x) {x[7]}))) %>%
select(-text.y, -num_items)
dp = dataparse %>%
left_join(groups, by = c("id", "group"))
write_csv(dp,"group_df.csv")
library(stringr)
groups = inner_join(agrees, items, by = c("id", "group")) %>%
select(-starts_with("you"), -starts_with("turn")) %>%
mutate(text.x = as.character(text.x),
agreement = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[3]})),
reward = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[2]}))) %>%
select(-text.x) %>%
mutate(text.y = as.character(text.y),
num_items = str_split(text.y, "=| "),
item1outcome = unlist(lapply(num_items,
function(x) {x[3]})),
item2outcome = unlist(lapply(num_items,
function(x) {x[5]})),
item3outcome = unlist(lapply(num_items,
function(x) {x[7]}))) %>%
select(-text.y, -num_items)
dp = dataparse %>%
left_join(groups, by = c("id", "group"))
write_csv(dp,"group_df.csv")
head(dp)
table(dp$reward)
head(items)
str_split(items$text[1:10], "=| ")
str_split(agrees$text[1:10], "=| ")
turntext = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n()) %>%
slice(-n())
write_csv(turntext,"turn_tf.csv")
### get group-level outcomes
agrees = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(n())
items = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n())  %>%
slice(n())
groups = inner_join(agrees, items, by = c("id", "group")) %>%
select(-starts_with("you"), -starts_with("turn")) %>%
mutate(text.x = as.character(text.x),
agreement = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[4]})),
reward = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[3]}))) %>%
select(-text.x) %>%
mutate(text.y = as.character(text.y),
num_items = str_split(text.y, "=| "),
item1outcome = unlist(lapply(num_items,
function(x) {x[5]})),
item2outcome = unlist(lapply(num_items,
function(x) {x[7]})),
item3outcome = unlist(lapply(num_items,
function(x) {x[9]}))) %>%
select(-text.y, -num_items)
dp = dataparse %>%
left_join(groups, by = c("id", "group"))
write_csv(dp,"group_df.csv")
head(dp)
hist(dp$reward)
hist(as.numeric(dp$reward))
table(dp$reward)
dp[dp$reward=="no",]$reward<-0
table(dp$reward)
table(dp$reward=="no")
table(dp$reward=="no",useNA="ifany")
head(groups)
table(groups$reward)
groups[groups$reward=="no",]$reward<-0
table(groups$reward)
hist(nchar(turnparse$text))
table(dataparse$group)
names(agrees)
names(dataparse)
names(dp)
names(groups)
names(items)
is.na(turnparse$group)
table(is.na(turnparse$group))
?n
head(turntext)
head(turntext,50)
head(turnparse, 50)
table(grepl("reward=",turnparse$text,fixed=T),grepl("<selection>",turnparse$text,fixed=T))
turntext = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n())
library(tidyverse)
library(stringr)
turntext = turnparse %>%
filter(!is.na(group)) %>%
group_by(id) %>%
slice(-n())
turntext[turntext$group%in%2000:2010,]
turnparse[turnparse$group%in%2000:2010,]
data.frame(turntext[turntext$group%in%2000:2010,])
max.turns<-sapply(1:max(turnparse$group,na.rm=T), function(x) max(turnparse[turnparse$group==x,"turn"]))
max.turns2<-sapply(1:max(turntext$group,na.rm=T), function(x) max(turntext[turntext$group==x,"turn"]))
table(max.turns-maxturns2)
table(max.turns-max.turns2)
turnparse[3000:3040,]
turntext = turnparse %>%
filter(!is.na(group))
turntext<-turntext[!grepl("<selection>",turntext$text,fixed=T),]
turntext<-turntext[!grepl("reward=",turntext$text,fixed=T),]
write_csv(turntext,"turn_tf.csv")
agrees = turnparse %>%
filter(!is.na(group))
?slice
turnparse[30:60,]
agrees = turnparse[!grepl("reward=",turnparse$text,fixed=T),]
agrees = turnparse[grepl("reward=",turnparse$text,fixed=T),]
items = turnparse[grepl("<selection>",turnparse$text,fixed=T),]
groups = inner_join(agrees, items, by = c("id", "group")) %>%
select(-starts_with("you"), -starts_with("turn")) %>%
mutate(text.x = as.character(text.x),
agreement = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[4]})),
reward = unlist(lapply(str_split(text.x, "=| "),
function(x) {x[3]}))) %>%
select(-text.x) %>%
mutate(text.y = as.character(text.y),
num_items = str_split(text.y, "=| "),
item1outcome = unlist(lapply(num_items,
function(x) {x[5]})),
item2outcome = unlist(lapply(num_items,
function(x) {x[7]})),
item3outcome = unlist(lapply(num_items,
function(x) {x[9]}))) %>%
select(-text.y, -num_items)
head(groups,50)
agrees[1:20,]
head(turnparse,50)
head(agrees,50)
head(groups,50)
